[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rust for R Developers",
    "section": "",
    "text": "Setting up\nBefore we can start, we need to get our house in order. We need to install:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Get set up</span>"
    ]
  },
  {
    "objectID": "index.html#setting-up",
    "href": "index.html#setting-up",
    "title": "Rust for R Developers",
    "section": "",
    "text": "Positron\nRust\nRust analyzer VS Code extension\nEven Better TOML VS Code extension",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Get set up</span>"
    ]
  },
  {
    "objectID": "index.html#install-positron",
    "href": "index.html#install-positron",
    "title": "Rust for R Developers",
    "section": "Install Positron",
    "text": "Install Positron\nDownload the appropriate Positron installer from the downloads page.\nOpen the extensions pane (or press shift + cmd + x).\n\nsearch for rust analyzer and install\nsearch for even better toml and install",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Get set up</span>"
    ]
  },
  {
    "objectID": "index.html#install-rust",
    "href": "index.html#install-rust",
    "title": "Rust for R Developers",
    "section": "Install rust",
    "text": "Install rust\nTo install Rust, please use rustup. If you use a system installation via brew, apt, dnf, etc you will likely run into issues. I will be able to help debug these.\nFor installing Rust on Mac / Unix / Linux please run:\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\nWindows\nIf using Windows download the appropriate installer. Then, once your installation is complete, from your command prompt run:\nrustup target add x86_64-pc-windows-gnu\nThis is a compilation target that is required for building extendr packages on Windows.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Get set up</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/index.html",
    "href": "intro-to-rust-for-r-devs/index.html",
    "title": "2  Overview",
    "section": "",
    "text": "Timeline\nWe’ve got 3 hours to cover a lot of ground!",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/index.html#timeline",
    "href": "intro-to-rust-for-r-devs/index.html#timeline",
    "title": "2  Overview",
    "section": "",
    "text": "What is rust\nHello, World!\nPrimitive types, logical operators, and control flow\nCreating Functions\nArrays & vectors\nFor loops\nMutability\nIterators\nReferences and Slices\nStructs\n\n\n\n\nStart\nDescription",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html",
    "href": "intro-to-rust-for-r-devs/hello-world.html",
    "title": "4  Hello, World!",
    "section": "",
    "text": "Crate anatomy\nRust uses a tool called cargo for building, checking, and managing dependencies.\nTo create a new Rust crate, use cargo new name-of-crate.\nTwo types of crates: binary, library.\nBinary crates are standalone applications like command line tools, or things that run once—simiar to a script that you run with Rscript main.R",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#your-first-crate",
    "href": "intro-to-rust-for-r-devs/hello-world.html#your-first-crate",
    "title": "4  Hello, World!",
    "section": "Your first crate",
    "text": "Your first crate\nLet’s create your first crate\ncargo new intro-to-rust",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy",
    "href": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy",
    "title": "4  Hello, World!",
    "section": "",
    "text": "This first workshop we will work only with a binary crate. We will create a library in the second half of the day.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#hello-world",
    "href": "intro-to-rust-for-r-devs/hello-world.html#hello-world",
    "title": "4  Hello, World!",
    "section": "Hello, world!",
    "text": "Hello, world!\n\nThe hello world is always prepopulated.\nThe main() function is required.\nthe contents of the main() function are what is executed by your binary crate\nto run your binary, from the command line we write cargo run\nthis will compile your code and then run it\n\nfn main() {\n    println!(\"Hello, world!\");\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#println-macro",
    "href": "intro-to-rust-for-r-devs/hello-world.html#println-macro",
    "title": "4  Hello, World!",
    "section": "println!() macro",
    "text": "println!() macro\n\nmacros are different than functions\nyou can tell them apart by the presence of the !\nprintln! is a handy helper to help us print things out to the terminal, otherwise we wont be able to see output\nin R printing is implicit, rust it is explicit—and kind of confusing to be honest\nuses format strings \"{}\" is a placeholder for something that can be displayed\nnot everything can be displayed, something only have a debug implementation we can use {:?}\n\nrecommend keeping this in mind for later.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/fizz-buzz.html",
    "href": "intro-to-rust-for-r-devs/fizz-buzz.html",
    "title": "5  Control Flow",
    "section": "",
    "text": "Numeric operators",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/fizz-buzz.html#exercise",
    "href": "intro-to-rust-for-r-devs/fizz-buzz.html#exercise",
    "title": "5  Control Flow",
    "section": "Exercise",
    "text": "Exercise\nThis exercise you will create the famous FizzBuzz program.\nFor this, create a variable i. The rules are:\n\nwhen i is a multiple of 3, print Fizz\nwhen i is a multiple of 5, print Buzz\nwhen i is a multiple of both 3 and 5, print FizzBuzz\n\n\nSolution\n\n\nView solution\n\nfn main() {\n    // let i = 15; // FizzBuzz\n    // let i = 3; // Fizz\n    // let i = 5; // Buzz\n    let i = 47; // Nothing\n    if (i % 3 == 0) && (i % 5 == 0) {\n        println!(\"FizzBuzz\");\n    } else if i % 3 == 0 {\n        println!(\"Fizz\");\n    } else if i % 5 == 0 {\n        println!(\"Buzz\");\n    }\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html",
    "href": "intro-to-rust-for-r-devs/collections.html",
    "title": "6  Arrays and Vectors",
    "section": "",
    "text": "Arrays\nArrays in Rust are fixed in size and hold values of the same type. Since the size is known ahead of time, it makes them fast but inflexible.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html#introduce-collections",
    "href": "intro-to-rust-for-r-devs/collections.html#introduce-collections",
    "title": "6  Arrays and Vectors",
    "section": "",
    "text": "discuss arrays first\narrays are fixed size\nvectors are not fixed sized\narrays are better for performance but much more difficult to use\ncreating vectors: vec![]\ndebug format for println!();\nR is unique in that most things are vectorized that is not often the case\nin order to use vectors we need to iterate\nprint the vector using debug format\n\nfn main() {\n    let x = vec![3, 6, 9, 12];\n    println!(\"Vector is: {:?}\", x);\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutability.html",
    "href": "intro-to-rust-for-r-devs/mutability.html",
    "title": "8  Mutability",
    "section": "",
    "text": "Exercise\nIn Rust, variables are immutable by default. This means once a value is assigned to a variable, it cannot be changed. To make a variable mutable, you must explicitly use the mut keyword.\nBy requiring mut, the compiler ensures that accidental mutations are caught at compile time.\nHere’s an example revisiting our loop from earlier:",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Mutability</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutability.html#solution",
    "href": "intro-to-rust-for-r-devs/mutability.html#solution",
    "title": "8  Mutability",
    "section": "Solution",
    "text": "Solution\nfn mean(x: &[f64]) -&gt; f64 {\n    let n = x.len() as f64;\n    let mut total = 0.0;\n\n    for xi in x {\n        total += xi;\n    }\n\n    total / n\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Mutability</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html",
    "href": "intro-to-rust-for-r-devs/iterators.html",
    "title": "11  Iterators",
    "section": "",
    "text": "Exercises",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html#iterator-basics",
    "href": "intro-to-rust-for-r-devs/iterators.html#iterator-basics",
    "title": "10  Iterators",
    "section": "",
    "text": ".iter() vs .into_iter()\n.len()\n.sum()\n.min(): not floating point arith issues here\n.max(): note floating point arith issues here",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html#exercise-1",
    "href": "intro-to-rust-for-r-devs/iterators.html#exercise-1",
    "title": "11  Iterators",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nRewrite the mean() function to use an iterator instead of a for loop",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html#mapping-over-iterators",
    "href": "intro-to-rust-for-r-devs/iterators.html#mapping-over-iterators",
    "title": "10  Iterators",
    "section": "Mapping over iterators",
    "text": "Mapping over iterators\n\n.map() . enumerate()\nclosures\n.collect()\n\nCan do something with FizzBuzz again here",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html#exercise-2",
    "href": "intro-to-rust-for-r-devs/iterators.html#exercise-2",
    "title": "10  Iterators",
    "section": "Exercise 2",
    "text": "Exercise 2\n\ncreate a function standardize() that performs z-score standardization\n\n\\[\nz_i = \\frac{x_i - \\mu}{\\sigma}\n\\]\n\nSolution\nfn standardize(data: Vec&lt;f64&gt;) -&gt; Vec&lt;f64&gt; {\n    let n = data.len() as f64;\n    let mean = data.iter().sum::&lt;f64&gt;() / n;\n\n    let variance = data.iter()\n        .map(|x| (x - mean).powi(2))\n        .sum::&lt;f64&gt;() / n;\n\n    let std_dev = variance.sqrt();\n\n    data.into_iter()\n        .map(|x| (x - mean) / std_dev)\n        .collect()\n}\n\nThings to potentially cover\nchain()\nfn main() {\n    let a1 = [1, 2, 3];\n    let a2 = [4, 5, 6];\n    a1.iter().chain(a2.iter());\n}\n\nany() rust equivalent of any(logical_statment) in R\nfilter()\nfind()\nfold() - our own min/max functions?\nzip()",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/structs.html",
    "href": "intro-to-rust-for-r-devs/structs.html",
    "title": "11  Defining Struct(ure)s",
    "section": "",
    "text": "Exercise",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Defining Struct(ure)s</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/structs.html#exercise",
    "href": "intro-to-rust-for-r-devs/structs.html#exercise",
    "title": "11  Defining Struct(ure)s",
    "section": "",
    "text": "Define a struct called Point which has two fields x, and y\nCreate a new Point struct\nDestructure the point",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Defining Struct(ure)s</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/enums.html",
    "href": "intro-to-rust-for-r-devs/enums.html",
    "title": "11  Enum(eration)s",
    "section": "",
    "text": "11.1 Exercise",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Enum(eration)s</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/enums.html#exercise",
    "href": "intro-to-rust-for-r-devs/enums.html#exercise",
    "title": "11  Enum(eration)s",
    "section": "",
    "text": "Create an enum called Measure\nCreate a new method distance() for our point struct\n\nenum Measure {\n    Euclidean,\n    Haversine,\n}\n\nimpl Point {\n    fn haversine_distance(&self, destination: &Self) -&gt; f64 {\n        let radius = 6_371_008.7714;\n        let theta1 = self.y.to_radians();\n        let theta2 = destination.y.to_radians();\n        let delta_theta = (destination.y - self.y).to_radians();\n        let delta_lambda = (destination.x - self.x).to_radians();\n        let a = (delta_theta / 2f64).sin().powi(2)\n            + theta1.cos() * theta2.cos() * (delta_lambda / 2f64).sin().powi(2);\n        2f64 * a.sqrt().asin() * radius\n    }\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Enum(eration)s</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#exercise",
    "href": "intro-to-rust-for-r-devs/hello-world.html#exercise",
    "title": "4  Hello, World!",
    "section": "Exercise",
    "text": "Exercise\n\nIn your terminal, create a new rust crate called intro-to-rust\nOpen the new rust crate in Positron\nRun the hello world program\nCreate variable called name with your name\nPrint Hello, {name}! using println!()\n\n\nSolution\n\n\nView solution\n\nIn src/main.rs\nfn main() {\n    let name = \"Josiah\";\n    println!(\"Hello, {name}!\");\n}\nTo run it navigate to your terminal and then run cargo run.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#solution",
    "href": "intro-to-rust-for-r-devs/hello-world.html#solution",
    "title": "4  Hello, World!",
    "section": "Solution",
    "text": "Solution\nRust projects are called crates. By default, cargo new creates a binary crate — a standalone program (like a script you run with Rscript).",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#objective-1",
    "href": "intro-to-rust-for-r-devs/hello-world.html#objective-1",
    "title": "4  Hello, World!",
    "section": "Objective",
    "text": "Objective\nGet comfortable with creating and running a basic Rust program. Understand the structure of a binary crate and use println!() to print output.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#exercise-1",
    "href": "intro-to-rust-for-r-devs/hello-world.html#exercise-1",
    "title": "4  Hello, World!",
    "section": "Exercise",
    "text": "Exercise\n\n✅ Create your first Rust project:\n\ncargo new intro-to-rust\ncd intro-to-rust\ncargo run\nYou should see: Hello, world!",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#solution-1",
    "href": "intro-to-rust-for-r-devs/hello-world.html#solution-1",
    "title": "4  Hello, World!",
    "section": "Solution",
    "text": "Solution\nRust projects are called crates. By default, cargo new creates a binary crate — a standalone program (like a script you run with Rscript).",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy-1",
    "href": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy-1",
    "title": "4  Hello, World!",
    "section": "Crate anatomy",
    "text": "Crate anatomy\nA new crate looks like this:\nintro-to-rust/\n├── Cargo.toml      # Metadata & dependencies (like DESCRIPTION)\n├── Cargo.lock      # Dependency versions (like renv.lock)\n└── src/\n    └── main.rs     # Entry point — like main.R",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#the-hello-world-program",
    "href": "intro-to-rust-for-r-devs/hello-world.html#the-hello-world-program",
    "title": "4  Hello, World!",
    "section": "The Hello World Program",
    "text": "The Hello World Program\nRust adds a working program for you. Open src/main.rs:\nfn main() {\n    println!(\"Hello, world!\");\n}\n\nmain() is required — it’s where execution starts.\nprintln!() prints to the terminal.\nTo run your program:\n\ncargo run",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#println-is-a-macro",
    "href": "intro-to-rust-for-r-devs/hello-world.html#println-is-a-macro",
    "title": "4  Hello, World!",
    "section": "println!() is a Macro",
    "text": "println!() is a Macro\n\nMacros have a !, like println!().\nThink of it like print() in R, but explicit.\nIt supports format strings:\n\nlet name = \"Josiah\";\nprintln!(\"Hello, {}!\", name);  // → Hello, Josiah!\n\n{} works if the value can be displayed.\nUse {:?} for debug output (like str() or dput() in R):\n\nlet v = vec![1, 2, 3];\nprintln!(\"{:?}\", v);  // → [1, 2, 3]",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#tldr",
    "href": "intro-to-rust-for-r-devs/hello-world.html#tldr",
    "title": "4  Hello, World!",
    "section": "TL;DR",
    "text": "TL;DR\nYou created a project, ran a binary, and printed output — the Rust way.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/why-rust.html",
    "href": "intro-to-rust-for-r-devs/why-rust.html",
    "title": "3  Why Rust?",
    "section": "",
    "text": "Reasoning\nRust is a programming language that’s fast, safe, and surprisingly friendly to use. Unlike R, which runs code line by line, Rust turns your code into a standalone program that runs directly on your computer. This makes it much faster and more efficient, similar to languages like C or C++. But where those languages can be hard to use and easy to break, Rust was built to be safer and more helpful.\nRust is especially good at preventing bugs related to memory and parallel code — the kind that can be really hard to track down in other languages. And it comes with tools and error messages that make writing and fixing code feel more approachable, even if you’re new to systems programming. Many R users find Rust refreshing: it’s strict, but in a way that teaches you better habits.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Rust?</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/why-rust.html#objective",
    "href": "intro-to-rust-for-r-devs/why-rust.html#objective",
    "title": "3  Why Rust?",
    "section": "",
    "text": "Tip\n\n\n\n🧠 Think of Rust as “C for people who like error messages that actually help.”",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Rust?</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/why-rust.html#concept",
    "href": "intro-to-rust-for-r-devs/why-rust.html#concept",
    "title": "3  Why Rust?",
    "section": "Concept",
    "text": "Concept\nRust is a programming language that’s fast, safe, and surprisingly friendly to use. Unlike R, which runs code line by line, Rust turns your code into a standalone program that runs directly on your computer. This makes it much faster and more efficient, similar to languages like C or C++. But where those languages can be hard to use and easy to break, Rust was built to be safer and more helpful.\nRust is especially good at preventing bugs related to memory and parallel code — the kind that can be really hard to track down in other languages. And it comes with tools and error messages that make writing and fixing code feel more approachable, even if you’re new to systems programming. Many R users find Rust refreshing: it’s strict, but in a way that teaches you better habits.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Rust?</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/why-rust.html#tldr",
    "href": "intro-to-rust-for-r-devs/why-rust.html#tldr",
    "title": "3  Why Rust?",
    "section": "TL;DR",
    "text": "TL;DR\n\nR is interpreted. Code runs line by line.\nR (and Python) are built on C.\nC is compiled — it builds a binary that runs directly on your machine.\nRust is also compiled, like C, C++, Go, Java, and Fortran.\nThese languages are “close to the metal” — fast, efficient, and powerful.\nRust matches C++ in speed, but with some key advantages:\n\nMemory safety without a garbage collector (unlike Go), thanks to the borrow checker.\nFearless concurrency — Rust makes parallelism safer and easier.\nA great developer experience:\n\nHelpful, friendly compiler errors (Tidyverse-level DX).\nModern tooling (cargo, rust-analyzer, etc.).\n\n\nRust is easy to get started with and rewards best practices.\n\nWe won’t go deep into memory safety or concurrency today",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Rust?</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/why-rust.html#reasoning",
    "href": "intro-to-rust-for-r-devs/why-rust.html#reasoning",
    "title": "3  Why Rust?",
    "section": "Reasoning",
    "text": "Reasoning\nRust is a programming language that’s fast, safe, and surprisingly friendly to use. Unlike R, which runs code line by line, Rust turns your code into a standalone program that runs directly on your computer. This makes it much faster and more efficient, similar to languages like C or C++. But where those languages can be hard to use and easy to break, Rust was built to be safer and more helpful.\nRust is especially good at preventing bugs related to memory and parallel code — the kind that can be really hard to track down in other languages. And it comes with tools and error messages that make writing and fixing code feel more approachable, even if you’re new to systems programming. Many R users find Rust refreshing: it’s strict, but in a way that teaches you better habits.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Why Rust?</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy-2",
    "href": "intro-to-rust-for-r-devs/hello-world.html#crate-anatomy-2",
    "title": "4  Hello, World!",
    "section": "Crate Anatomy",
    "text": "Crate Anatomy\nA new crate looks like this:\nintro-to-rust/\n├── Cargo.toml      # Metadata & dependencies (like DESCRIPTION)\n├── Cargo.lock      # Dependency versions (like renv.lock)\n└── src/\n    └── main.rs     # Entry point — like main.R",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#main.rs",
    "href": "intro-to-rust-for-r-devs/hello-world.html#main.rs",
    "title": "4  Hello, World!",
    "section": "main.rs",
    "text": "main.rs\nWhen you create a new rust binary the file src/main.rs is prepopulated with:\n\n\n\n\n\n\nTip\n\n\n\nsrc/main.rs defines what is executed when your binary is run.\n\n\nfn main() {\n    println!(\"Hello, world!\");\n}\nThere are a few things going on in here:\n\nFunctions are declared using the fn keyword\nThe main() function is the entrypoint of the program (and required)\nBlocks of code are delimted using curly braces (like R & C)\nStatements end with ;\nprintln!() is a macro (notice the !) which is used to print to stdout\n\n\n\nWhen a program writes to the console it does so through file connections called standard output (stdout) and standard error (stderr).\nWhen we print a message with print() or message() in R, we print to stdout. When we make a warning or error using stop() or warning() in R, that is writing to stderr.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/hello-world.html#println",
    "href": "intro-to-rust-for-r-devs/hello-world.html#println",
    "title": "4  Hello, World!",
    "section": "println!()",
    "text": "println!()\n\nMacros have a !, like println!().\nThink of it like print() in R, but explicit.\nIt supports format strings:\n\nlet name = \"Josiah\";\nprintln!(\"Hello, {}!\", name);  // -&gt; Hello, Josiah!",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Hello, World!</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/fizz-buzz.html#control-flow",
    "href": "intro-to-rust-for-r-devs/fizz-buzz.html#control-flow",
    "title": "5  Control Flow",
    "section": "Control flow",
    "text": "Control flow\nRust uses if, else, and else if statements just like R. Where each branch is delimted by curly braces.\n\n\n\n\n\n\nWarning\n\n\n\nEach branch of the if statement must return the same type. For this portion of the workshop, be sure to terminate each statement inside of the if statement so that nothing is returned.\n\n\nif x == y {\n  // do something\n} else {\n  // do something else\n}\nThe key difference is that the use of parentheses is not necessary for the conditional statement.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/fizz-buzz.html#logical-operators",
    "href": "intro-to-rust-for-r-devs/fizz-buzz.html#logical-operators",
    "title": "5  Control Flow",
    "section": "Logical Operators:",
    "text": "Logical Operators:\nLogical operators are quite similar to R. The key differe\n\n== check equality\n!= check inequality\n! negate a logical value\n&& logical AND comparison\n|| logical OR comparison",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/fizz-buzz.html#numeric-operators",
    "href": "intro-to-rust-for-r-devs/fizz-buzz.html#numeric-operators",
    "title": "5  Control Flow",
    "section": "",
    "text": "+ addition\n- subtraction\n/ division\n^ exponentiation\n% remainder",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Control Flow</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html#objective",
    "href": "intro-to-rust-for-r-devs/collections.html#objective",
    "title": "6  Arrays and Vectors",
    "section": "",
    "text": "Create and store many values of the same type.\nUnderstand the difference between arrays and vectors. :::",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html#arrays",
    "href": "intro-to-rust-for-r-devs/collections.html#arrays",
    "title": "6  Arrays and Vectors",
    "section": "",
    "text": "fn main() {\n    let arr = [10, 20, 30, 40];\n    println!(\"Array: {:?}\", arr);\n}\n\n\n\n\n\n\nNote\n\n\n\nThe {:?} syntax is used for a Debug representation of a variable. Using {} is used for Displaying data.\nMore often than not, using {:?} will be your best option.\n\n\n\nArrays use square brackets: [1, 2, 3]\nTheir size is known at compile time.\nYou can’t add or remove elements.\nMostly used when performance is critical and size is known.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html#vectors",
    "href": "intro-to-rust-for-r-devs/collections.html#vectors",
    "title": "6  Arrays and Vectors",
    "section": "Vectors",
    "text": "Vectors\nVectors are like growable arrays. They live on the heap and are much more common in everyday Rust code. We’ll explore how to modify them later, but for now, we can define them with values known at the start.\nfn main() {\n    let v = vec![1, 2, 3, 4, 5];\n    println!(\"Vector: {:?}\", v);\n}\n\nCreate vectors using vec![]\nYou don’t need mut if you’re not changing them.\nLike arrays, all values must be the same type.\n\nIn R, most things are vectorized. In Rust, we often iterate over collections to work with them.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/collections.html#exercise",
    "href": "intro-to-rust-for-r-devs/collections.html#exercise",
    "title": "6  Arrays and Vectors",
    "section": "Exercise",
    "text": "Exercise\n\nCreate an array of 4 integers and print it.\nCreate a vector with 5 numbers and print it using {:?}.\n\n\nSolution\n\n\nView solution\n\nfn main() {\n    let arr = [1, 2, 3, 4];\n    println!(\"Array: {:?}\", arr);\n\n    let v = vec![10, 20, 30, 40, 50];\n    println!(\"Vector: {:?}\", v);\n}\n\n\nNOTES:\nTODO:\nadd a bit on .len() and .is_empty()",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Arrays and Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutability.html#vector-mutability",
    "href": "intro-to-rust-for-r-devs/mutability.html#vector-mutability",
    "title": "8  Mutability",
    "section": "Vector mutability",
    "text": "Vector mutability\n\ncover mutable vectors\n.push()",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Mutability</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutable-vectors.html",
    "href": "intro-to-rust-for-r-devs/mutable-vectors.html",
    "title": "9  Mutable Vectors",
    "section": "",
    "text": "Creating empty vectors\nIn Rust, vectors (Vec&lt;T&gt;) are growable arrays. To modify a vector after creating it, the vector itself must be declared as mut.\nYou can create an empty vector and let Rust infer the type based on usage:",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Mutable Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/for-loops.html",
    "href": "intro-to-rust-for-r-devs/for-loops.html",
    "title": "7  For Loops",
    "section": "",
    "text": "for loop syntax\nIn Rust, for loops are the easiest way to go over each item in a vector or array.",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>For Loops</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/for-loops.html#exercise-1",
    "href": "intro-to-rust-for-r-devs/for-loops.html#exercise-1",
    "title": "7  For loops",
    "section": "",
    "text": "fizzbuzz with a vector\n\n\nSolution\n\n\nView solution\n\nfn main() {\n    // for loop here\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>For loops</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/for-loops.html#for-loop-syntax",
    "href": "intro-to-rust-for-r-devs/for-loops.html#for-loop-syntax",
    "title": "7  For Loops",
    "section": "",
    "text": "for value in collection {\n    // do something with value\n}\n\nfn main() {\n    let nums = vec![1, 2, 3];\n    for n in nums {\n        println!(\"n is: {}\", n);\n    }\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>For Loops</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/for-loops.html#exercise",
    "href": "intro-to-rust-for-r-devs/for-loops.html#exercise",
    "title": "7  For Loops",
    "section": "Exercise",
    "text": "Exercise\nUsing a vector of integers, write a loop that prints:\n\n“Fizz” if divisible by 3\n“Buzz” if divisible by 5\n“FizzBuzz” if divisible by both\nThe number otherwise\n\nUse this vector: vec![1, 2, 3, 4, 5, 15]\n\nSolution\n\n\nView solution\n\nfn main() {\n    let nums = vec![1, 2, 3, 4, 5, 15];\n\n    for n in nums {\n        if n % 15 == 0 {\n            println!(\"FizzBuzz\");\n        } else if n % 3 == 0 {\n            println!(\"Fizz\");\n        } else if n % 5 == 0 {\n            println!(\"Buzz\");\n        } else {\n            println!(\"{}\", n);\n        }\n    }\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>For Loops</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/for-loops.html#scope",
    "href": "intro-to-rust-for-r-devs/for-loops.html#scope",
    "title": "7  For Loops",
    "section": "Scope",
    "text": "Scope\n\nValues outside of the for loop are accessible inside of it.\nValues created inside of the for loop cannot be accessed outside of it.\n\nExample: outer value used inside loop\nfn main() {\n    let greeting = \"Hi\";\n    let names = vec![\"Alice\", \"Bob\"];\n\n    for name in names {\n        println!(\"{} {}!\", greeting, name);\n    }\n}\nExample: inner value not usable outside loop\n\nThis does not compile!\n\nfn main() {\n    let numbers = vec![1, 2, 3];\n\n    for n in numbers {\n        let doubled = n * 2;\n        println!(\"{} doubled is {}\", n, doubled);\n    }\n\n    // println!(\"Last doubled: {}\", doubled); // ❌ `doubled` doesn't exist here\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>For Loops</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutability.html#exercise",
    "href": "intro-to-rust-for-r-devs/mutability.html#exercise",
    "title": "8  Mutability",
    "section": "",
    "text": "Create a vector of 5 or more f64 values (Vec&lt;f64&gt;)\nUse a for loop to calculate the mean of the vector\nPrint the result\n\n\n\n\n\n\n\nNote\n\n\n\nWe’ve been working only with integers. To create a float (number with decimals) use 0.0 or specify the type manually e.g. 0f64.\n\n\n\nSolution\n\n\nView solution\n\nfn main() {\n    let x = vec![1.0, 2.0, 3.0, 4.0];\n\n    let n = x.len() as f64;\n    let mut total = 0.0;\n\n    for xi in x {\n        total += xi;\n    }\n\n    println!(\"The mean is: {}\", total / n);\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Mutability</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/mutable-vectors.html#exercise",
    "href": "intro-to-rust-for-r-devs/mutable-vectors.html#exercise",
    "title": "9  Mutable Vectors",
    "section": "Exercise",
    "text": "Exercise\n\nCreate an empty vector\nAppend the values 1.0, 2.0, and 3.0 using .push()\nClear the vector to make it empty\nLastly, extend it with another vector e.g. [4.0, 5.0]\nPrint the final result.\n\n\nSolution\n\n\nView solution\n\nfn main() {\n    let mut x = Vec::new();\n    x.push(1.0);\n    x.push(2.0);\n    x.push(3.0);\n    x.clear();\n    x.extend(vec![4.0, 5.0]);\n    println!(\"{:?}\", x);\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Mutable Vectors</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/iterators.html#exercises",
    "href": "intro-to-rust-for-r-devs/iterators.html#exercises",
    "title": "11  Iterators",
    "section": "",
    "text": "calculate the mean using an iterator\nuse an enumerated for loop to sum only even numbers",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Iterators</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/is-odd.html",
    "href": "intro-to-rust-for-r-devs/is-odd.html",
    "title": "10  Functions",
    "section": "",
    "text": "Example\nIdentifying if a value is odd or even isn’t always so easy!\nFirst define a function called is_even() that takes an i32 (integer) and returns a bool.\nWe can use our already defined function inside of another:",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/is-odd.html#is_even-is_odd",
    "href": "intro-to-rust-for-r-devs/is-odd.html#is_even-is_odd",
    "title": "10  Functions",
    "section": "",
    "text": "meme about is_odd in javascript\nwe will create our first function with a return type\ndiscuss bools\nfirst create is_even() then use that toe create an is_odd()\n\nfn is_even(x: i32) -&gt; bool {\n    x % 2 == 0\n}\n\nfn is_odd(x: i32) -&gt; bool {\n    !is_even(x)\n}\n\nfn main() {\n    let x = 3;\n    println!(\"{x} is even: {}\", is_even(x));\n    println!(\"{x} is odd: {}\", is_odd(x));\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/is-odd.html#exercise",
    "href": "intro-to-rust-for-r-devs/is-odd.html#exercise",
    "title": "10  Functions",
    "section": "Exercise",
    "text": "Exercise\nCreate a function called mean() that calculates the mean of a Vec&lt;f64&gt;.\n\nIn main(), create a vector x with 5 or more f64 values.\nCall mean(x) and print the result.\n\n\n\n\n\n\n\nNote\n\n\n\nUse x.len() to get the length and as f64 to convert it to a float.\n\n\n\nSolution\n\n\nView solution\n\nfn mean(x: Vec&lt;f64&gt;) -&gt; f64 {\n    let mut total = 0.0;\n    let n = x.len();\n    for xi in x {\n        total += xi;\n    }\n    total / n as f64\n}\n\nfn main() {\n    let x = vec![1.0, 2.0, 3.0, 4.0, 5.0];\n    let result = mean(x);\n    println!(\"Mean is: {}\", result);\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/is-odd.html#example",
    "href": "intro-to-rust-for-r-devs/is-odd.html#example",
    "title": "10  Functions",
    "section": "",
    "text": "is-odd npm\n\n\n\nfn is_even(x: i32) -&gt; bool {\n    x % 2 == 0\n}\n\nfn is_odd(x: i32) -&gt; bool {\n    !is_even(x)\n}",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/references-slices.html",
    "href": "intro-to-rust-for-r-devs/references-slices.html",
    "title": "11  Ownership",
    "section": "",
    "text": "Exercise 1\nrewrite mean() to use a reference to `Vec",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Ownership</span>"
    ]
  },
  {
    "objectID": "intro-to-rust-for-r-devs/references-slices.html#exercise-1",
    "href": "intro-to-rust-for-r-devs/references-slices.html#exercise-1",
    "title": "11  Ownership",
    "section": "",
    "text": "Solution\nfn mean(x: &Vec&lt;f64&gt;) -&gt; f64 {\n    let mut total = 0.0;\n    let n = x.len();\n\n    for xi in x {\n        total += xi;\n    }\n    total / n as f64\n}\n\n\nreference\nslice\nmutable reference",
    "crumbs": [
      "Intro to Rust for R Developers",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Ownership</span>"
    ]
  }
]