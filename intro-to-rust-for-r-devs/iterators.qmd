# Iterators

::: callout-tip

## Objective

- Understand what an iterator is and how to create one.
- Learn the difference between `.iter()` and `.into_iter()`.
- Use basic iterator methods like `.sum()`, `.min()`, `.max()`, and `.enumerate()`.

:::

Iterators are values that produce a sequence of items, one at a time.
They can be created from collections like vectors, arrays, and ranges.

## Consuming vs. Borrowing

- `.into_iter()` *consumes* the original value, transferring ownership.
- `.iter()` *borrows* the collection, producing references to each item.
- A `for` loop uses `.into_iter()` under the hood.

```rust
fn main() {
    let nums = vec![3, 6, 9];

    for n in nums.into_iter() {
        println!("Value: {}", n);
    }
    // nums no longer available here ❌
}
```

```rust
fn main() {
    let nums = vec![3, 6, 9];

    for n in nums.iter() {
        println!("Reference to value: {}", n);
    }
    // nums is still usable ✅
    println!("nums: {:?}", nums);
}
```

## Basic Iterator Methods

Once you have an iterator, you can use built-in methods:

* `.sum()` — Add all the values together.
* `.min()` — Find the smallest value.
* `.max()` — Find the largest value.
* `.enumerate()` — Pairs each value with its index.

```rust
fn main() {
    let nums = vec![2, 4, 8];
    let total: i32 = nums.iter().sum();
    println!("Sum is: {}", total);
}
```

## Exercise 1

- Modify the `mean()` function to calculate the mean using `.iter()`
- Create a vector of 5 or more `f64` values
- Calculate the mean and print the result

### Solution

<details>
<summary>View solution</summary>

```rust
fn mean(x: &[f64]) -> f64 {
    let total: f64 = x.iter().sum();
    total / x.len() as f64
}

fn main() {
    let nums = vec![1.0, 2.0, 3.0, 4.0, 5.0];
    println!("Mean is: {}", mean(&nums));
}
```

</details>

## Exercise 2

- Print the index and value for each item in a vector for **only even** values

### Solution

<details>
<summary>View solution</summary>

```rust
fn main() {
    let nums = vec![1, 2, 3, 4, 5, 6];

    for (i, n) in nums.iter().enumerate() {
        if n % 2 == 0 {
            println!("Index {i}: {n} is even");
        }
    }
}
```

</details>
