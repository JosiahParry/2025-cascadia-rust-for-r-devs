# Hello, World!


::: callout-tip
## Objective

- Create a rust crate
- Understand the structure of a rust crate
- Use `cargo run` to run a binary
- Use the `println!()` macro
:::

## Your first crate

Rust uses a tool called `cargo` for building, checking, and managing dependencies.

To create a new Rust crate, use `cargo new name-of-crate`.

## Crate anatomy

Two types of crates: binary, library.

::: aside
This first workshop we will work only with a binary crate. We will create a library in the second half of the day.
:::

Binary crates are standalone applications like command line tools, or things that run once—simiar to a script that you run with `Rscript main.R`


## Crate anatomy

A new crate looks like this:

```
intro-to-rust/
├── Cargo.toml      # Metadata & dependencies (like DESCRIPTION)
├── Cargo.lock      # Dependency versions (like renv.lock)
└── src/
    └── main.rs     # Entry point — like main.R
```


## `main.rs`

When you create a new rust binary the file `src/main.rs` is prepopulated with:

::: callout-tip
`src/main.rs` defines what is executed when your _binary_ is run.
:::

```rust
fn main() {
    println!("Hello, world!");
}
```

There are a few things going on in here:

- Functions are declared using the `fn` keyword
- The `main()` function is the entrypoint of the program (and required)
- Blocks of code are delimted using curly braces (like R & C)
- Statements end with `;`
- `println!()` is a macro (notice the `!`) which is used to print to `stdout`

::: aside
When a program writes to the console it does so through file connections called standard output (`stdout`) and standard error (`stderr`).

When we print a message with `print()` or `message()` in R, we print to stdout. When we make a warning or error using `stop()` or `warning()` in R, that is writing to `stderr`.
:::


## `println!()`

* Macros have a `!`, like `println!()`.
* Think of it like `print()` in R, but explicit.
* It supports format strings:

```rust
let name = "Josiah";
println!("Hello, {}!", name);  // -> Hello, Josiah!
```


## Exercise

- In your terminal, create a new rust crate called `intro-to-rust`
- Open the new rust crate in Positron
- Run the hello world program
- Create variable called `name` with your name
- Print `Hello, {name}!` using `println!()`


### Solution

<details>
<summary>View solution </summary>

In `src/main.rs`

```rust
fn main() {
    let name = "Josiah";
    println!("Hello, {name}!");
}
```

To run it navigate to your terminal and then run `cargo run`.

</details>
