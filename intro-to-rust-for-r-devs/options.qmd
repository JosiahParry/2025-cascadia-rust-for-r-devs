# `Some()` or `None`?

::: callout-tip
## Objective
- Understand how to handle missingness
- Use `Option<T>` in an applied case
:::

- rust doesn't have the concept of a null
- null are dangerous and lead to a whole category of errors and security flaws
- Rust has a concept of an `Option<>`
- options are just enums
- options have two possible values:
    - `Some(T)`
    - `None`
- Some is used to indicate the presence of a value
- None is used to indicate the absence of a value

Option is defined as:
```rust
enum Option {
    Some(T),
    None
}
```

we can match on these. When we have a some value we can use the inner value when we dont we can perform some fallback operation

```rust

```

## Danger! `.unwrap()` & `.expect()`

- sometimes dealing with options is a headache, particularly when we're in the early stages of developing
- to get the inner value of an `Option<T>` without checking we can use `.unwrap()` or `.expect()`
- these both give you the inner value. If the value is not found then the program panics.
    - this is _very_ bad
- TODO panic screenshot
- `.expect()` takes a message so that when a panic is encountered the message is more informative.


## Exercise

- modify the `distance()` method to take an `Option<Measure>`
- when `None` use euclidean distance, otherwise use the provided distance measure

::: aside
The exercise does not involve `.unwrap()` because it's a bad habbit. Let's try and form good habbits from the outset if possible.
:::

```rust
impl Point {
    fn distance(&self, destination: &Self, measure: Option<&Measure>) -> f64 {
        match measure {
            Some(m) => match m {
                Measure::Euclidean => self.euclidean_distance(destination),
                Measure::Haversine => self.haversine_distance(destination),
            },
            None => self.euclidean_distance(destination),
        }
    }
}
````
