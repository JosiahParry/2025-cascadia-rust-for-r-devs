# Enum(eration)s


## Exercise

- Create an enum called `Measure`
- Create a new method `distance()` for our point struct

```rust
enum Measure {
    Euclidean,
    Haversine,
}

impl Point {
    fn haversine_distance(&self, destination: &Self) -> f64 {
        let radius = 6_371_008.7714;
        let theta1 = self.y.to_radians();
        let theta2 = destination.y.to_radians();
        let delta_theta = (destination.y - self.y).to_radians();
        let delta_lambda = (destination.x - self.x).to_radians();
        let a = (delta_theta / 2f64).sin().powi(2)
            + theta1.cos() * theta2.cos() * (delta_lambda / 2f64).sin().powi(2);
        2f64 * a.sqrt().asin() * radius
    }
}
```
