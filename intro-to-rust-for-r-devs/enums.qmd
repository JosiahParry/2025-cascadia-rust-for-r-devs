# Enum(eration)s

- enums are values that can take on only a number of specific values
- the values that enums can take are called variants
- define enums with the keyword `enum`
- think of these as the equivalent of R when we define possible values an argument can take

## Enums in R
- for example the R function `stats::cor()` has the argument `method = c("pearson", "kendall", "spearman")`.
    - method can only be pearson kendall or spearman otherwise an error happens
- this is an informal way of specifying an enumeration
    - i've wrtten about this in more detail in R which may be interesting for y'all
        - https://josiahparry.com/posts/2023-11-10-enums-in-r/

### Example:

we can define an enum called `Shape`

```rust
enum Shape {
    Triangle,
    Rectangle,
    Pentagon,
    Hexagon,
}
```

## Variant-specific behavior

- choose a variant by `EnumName::Variant`
This means that `Shape` can take on only one of those 4 **variants**

- seems kind of confusing at first, how do you actually use this?
- we perform pattern matching on the enum and perform some action based on the variant

- use the keyword `match` to perform an action based on the value
- we list each variant and define the action that happens using format `Enum::Variant => action`
- note the "fat arrow"

```rust
match my_shape {
    Shape::Triangle => todo!(),
    Shape::Rectangle => todo!(),
    Shape::Pentagon => todo!(),
    Shape::Hexagon => todo!(),
}
```

::: callout-tip
todo!() is a placeholder that can be used to make the compiler happy
:::


### Example

- we print the number of vertices for each shape

```rust
let my_shape = Shape::Triangle;

match my_shape {
    Shape::Triangle => println!("A triangle has 3 vertices"),
    Shape::Rectangle => println!("A rectangle has 4 vertices"),
    Shape::Pentagon => println!("A pentagon has 5 vertices"),
    Shape::Hexagon => println!("A hexagon has 6 vertices"),
}
```

- sometimes we only want to customize behavior on only a subset of variants
- we can use a catch all in the match statement `_ =>` use the underscore to signify "everything else"

```rust
match my_shape {
    Shape::Hexagon => println!("Hexagons are the bestagons);
    _ => println!("Every other polygon is mid");
}
```

Enums can have methods too just like a struct using `impl` keyword

```rust
impl Shape {
    fn is_bestagon(&self) -> bool {
        match self {
            Self::Hexagon => true,
            _ => false
        }
    }
}
```



## Exercise 1

- recreate the shape enum
- create a method called `n_vertices()` which returns a `usize`
- create two different variants of the Shape enum and print their number of vertices

## Exercise 2

- Create an enum called `Measure` with two variants `Euclidean` and `Haversine`
- Create a new method `distance()` for our point struct that takes 3 arguments and returns an f64
    - a reference to self
    - a reference to another point
    - a reference to a Measure enum
- When the variant is Euclidean use the euclidean_distance() method
- When the variant is Haversine use the haversine_distance() method



```rust
enum Measure {
    Euclidean,
    Haversine,
}

impl Point {
    // Demonstrates using pattern matching an enum
    fn distance(&self, destination: &Self, measure: &Measure) -> f64 {
        match measure {
            Measure::Euclidean => self.euclidean_distance(destination),
            Measure::Haversine => self.haversine_distance(destination),
        }
    }
}
```
