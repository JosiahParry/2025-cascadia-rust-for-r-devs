# Ownership

::: callout-tip
## Objective
- Understand that values in Rust have a single owner.
- Learn how to avoid ownership errors by borrowing or cloning.
:::

Rust enforces *ownership* at compile time. This ensures memory safety, but it means variables can only be used once‚Äîunless they‚Äôre borrowed.

## Moves

```rust
fn main() {
    let x = vec![1.0, 2.0, 3.0];
    let y = x; // üëà ownership moved
    println!("{:?}", x); // ‚ùå error: value used after move
}
```

- Ownership of `x` was moved to `y`
- After a move, the original variable (`x`) can‚Äôt be used

## Borrowing

```rust
fn main() {
    let x = vec![1.0, 2.0, 3.0];
    let avg = mean(&x); // üëà borrowing `x`
    println!("x is still usable: {:?}", x);
}
```

- Borrowing uses `&` to pass by *reference*
- You can borrow a value as many times as you want (immutably)
- You can't mutate or move them while borrowed

::: callout-note
"When in doubt, clone it out!"
:::

- `.clone()` makes a full copy of a value‚Äîuseful when you *need* to keep ownership

## Exercise 1

Rewrite the `mean()` function to accept a **reference** to a `Vec<f64>` instead of taking ownership. Then call it with a borrowed vector.

### Solution

<details>
<summary>View solution</summary>

```rust
fn mean(x: &Vec<f64>) -> f64 {
    let mut total = 0.0;
    for xi in x {
        total += xi;
    }
    total / x.len() as f64
}
```

</details>

---

## Slices

- A slice is a borrowed section of a collection
- Always a reference: `&[T]`
- Has known length with `.len()`
- Preferred when you don't need the full container

```rust
let values = vec![10.0, 20.0, 30.0];
let avg = mean(&values); // full slice
let avg = mean(&values[0..3]) // the first 3 elements
```

::: callout-tip
We won't cover the `[..]` syntax but you should think it similar to R! It uses a [range](https://doc.rust-lang.org/rust-by-example/flow_control/for.html). A range takes the format of `from..to` where `to` is _uninclusive_. So `0..3` would be indices 0, 1, and 2!
:::

- Slices are lighter-weight than borrowing a full vector
- In general: prefer slices ‚Üí references ‚Üí moves

## Exercise 2

- Rewrite `mean()` to accept a slice (`&[f64]`) instead of a `Vec<f64>` reference.
- Try using `mean()` on a subset of values.

### Solution

<details>
<summary>View solution</summary>

```rust
fn mean(x: &[f64]) -> f64 {
    let mut total = 0.0;
    for xi in x {
        total += xi;
    }
    total / x.len() as f64
}
```

</details>
