# Mapping over Iterators

::: callout-tip
## Objective
- Understand how to transform iterator values using `.map()`
- Learn closures (anonymous functions) in Rust
- Collect iterator results back into a collection using `.collect()`
- Use turbofish syntax for type annotations when needed
:::

## Mapping over iterators



- `.map()` transforms each item of an iterator by applying a closure (anonymous function)
- Closures are small functions you can define inline, e.g. `|x| x + 1`
- akin to `purrr::map(x, ~ .x + 1)` or .`purrr::map(x, \(.x) .x + 1)`
- mapping only modifies the iterator
- we need to `collect()` the values into another container if we want them

### Example

TODO!

## Collecting iterators

- `.collect()` gathers the results of an iterator into a collection (like a vector)
- we need to specify the type of what we're collecting into.
- in our case we're always going to collect into a vector
- two ways of specifying
    - we can specify the resultant type in the assignment with `let x: Vec<i32>` but this is not as flexible to changing code
    - Turbofish `::<Type>()` is used to explicitly specify types when needed
        - its a bit more awkward at first, but it is more flexible and doesn't require modification whenever the inner type changes
        - additionall we can use rust's iference using `_`



### Examples

:::{layout-ncol="2"}
#### Explicit typing
```rust
fn main() {
    let nums = vec![1, 2, 3];

    // Add 1 to each element
    let incremented: Vec<_> = nums.iter()
        .map(|x| x + 1)
        .collect();

    println!("{:?}", incremented);
}
```

#### Inference w/ turbofish
```rust
fn main() {
    let nums = vec![1, 2, 3];

    // Add 1 to each element
    let incremented = nums.iter()
        .map(|x| x + 1)
        .collect::<Vec<_>>();

    println!("{:?}", incremented);
}
```
:::



## Exercise 1

Calculate the **variance** of a slice of `f64` values.

$$
\text{variance} = \frac{\sum_{i=1}^n (x_i - \bar{x})^2}{n - 1}
$$

* Create a function `variance()` that:

  * Uses `.map()` to calculate squared differences from the mean
  * Uses `.sum()` to add them up
  * Divides by `n - 1`

::: callout-tip

* Use `.powi(2)` to square values.
* Use your previously defined `mean()` function inside `variance()`.
:::


<details>
<summary>View hint</summary>

```rust
fn variance(x: &[f64]) -> f64 {
    let n = x.len() as f64;
    let avg = mean(x);
    let sq_diffs: f64 = x
        .iter()
        .map(|xi| ___ )  // squared difference here
        .__();           // sum method here

    sq_diffs / (n - 1.0)
}
```

</details>

### Solution

<details>
<summary>View solution</summary>

```rust
fn variance(x: &[f64]) -> f64 {
    let n = x.len() as f64;
    let avg = mean(x);
    let sq_diffs: f64 = x
        .iter()
        .map(|xi| (xi - avg).powi(2))
        .sum();
    sq_diffs / (n - 1.0)
}

fn main() {
    let x = vec![2.0, 4.0, 4.0, 4.0, 5.0, 5.0, 7.0, 9.0];
    println!("Variance is: {:.2}", variance(&x));
}
```

</details>


## Exercise 2

Create a function `standardize()` to perform z-score standardization on a vector of `f64`.

$$
z_i = \frac{x_i - \mu}{\sigma}
$$

* Use `.iter()` and `.map()` to calculate mean and variance.
* Use `.into_iter()`, `.map()`, and `.collect()` to build the standardized vector.
* Return a new `Vec<f64>` of standardized values.

### Solution

<details>
<summary>View solution</summary>

```rust
fn standardize(x: &[f64]) -> Vec<f64> {
    let avg = mean(x);
    let std_dev = variance(x).sqrt();
    x.iter().map(|xi| (xi - avg) / std_dev).collect()
}

fn main() {
    let x = vec![1.0, 2.0, 3.0, 4.0, 5.0];
    let standardized = standardize(x);
    println!("Standardized: {:?}", standardized);
}
```

</details>
