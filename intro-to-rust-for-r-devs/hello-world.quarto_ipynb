{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Hello, World!\n",
        "\n",
        "\n",
        "::: callout-tip\n",
        "## Objective\n",
        "\n",
        "- Create a rust crate\n",
        "- Understand the structure of a rust crate\n",
        "- Use `cargo run` to run a binary\n",
        "- Use the `println!()` macro\n",
        ":::\n",
        "\n",
        "## Your first crate\n",
        "\n",
        "Rust uses a tool called `cargo` for building, checking, and managing dependencies.\n",
        "\n",
        "To create a new Rust crate, use `cargo new name-of-crate`.\n",
        "\n",
        "## Crate anatomy\n",
        "\n",
        "Two types of crates: binary, library.\n",
        "\n",
        "::: aside\n",
        "This first workshop we will work only with a binary crate. We will create a library in the second half of the day.\n",
        ":::\n",
        "\n",
        "Binary crates are standalone applications like command line tools, or things that run once—simiar to a script that you run with `Rscript main.R`\n",
        "\n",
        "## Exercise\n",
        "\n",
        "- Create a new Rust crate called `intro-to-rust`\n",
        "\n",
        "```bash\n",
        "#| code-fold: true\n",
        "#| code-summary: Show solution\n",
        "cargo new intro-to-rust\n",
        "```\n",
        "\n",
        "## Crate anatomy\n",
        "\n",
        "A new crate looks like this:\n",
        "\n",
        "```\n",
        "intro-to-rust/\n",
        "├── Cargo.toml      # Metadata & dependencies (like DESCRIPTION)\n",
        "├── Cargo.lock      # Dependency versions (like renv.lock)\n",
        "└── src/\n",
        "    └── main.rs     # Entry point — like main.R\n",
        "```\n",
        "\n",
        "\n",
        "## Hello, world!\n",
        "\n",
        "- The hello world is always prepopulated.\n",
        "- The `main()` function is required.\n",
        "- the contents of the `main()` function are what is executed by your binary crate\n",
        "- to run your binary, from the command line we write `cargo run`\n",
        "- this will compile your code and then run it\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{rust}\n",
        "fn main() {\n",
        "    println!(\"Hello, world!\");\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## `println!()` macro\n",
        "\n",
        "- macros are different than functions\n",
        "- you can tell them apart by the presence of the `!`\n",
        "- println! is a handy helper to help us print things out to the terminal, otherwise we wont be able to see output\n",
        "- in R printing is implicit, rust it is explicit—and kind of confusing to be honest\n",
        "- uses format strings `\"{}\"` is a placeholder for something that can be _displayed_\n",
        "- not everything can be displayed, something only have a **debug** implementation we can use `{:?}`\n",
        "  - recommend keeping this in mind for later.\n",
        "\n",
        "----\n",
        "\n",
        "# Hello, World!\n",
        "\n",
        "## Objective\n",
        "\n",
        "Get comfortable with creating and running a basic Rust program. Understand the structure of a binary crate and use `println!()` to print output.\n",
        "\n",
        "---\n",
        "\n",
        "## Exercise\n",
        "\n",
        "> ✅ Create your first Rust project:\n",
        "\n",
        "```bash\n",
        "cargo new intro-to-rust\n",
        "cd intro-to-rust\n",
        "cargo run\n",
        "```\n",
        "\n",
        "You should see: `Hello, world!`\n",
        "\n",
        "---\n",
        "\n",
        "## Solution\n",
        "\n",
        "Rust projects are called **crates**. By default, `cargo new` creates a **binary crate** — a standalone program (like a script you run with `Rscript`).\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## The Hello World Program\n",
        "\n",
        "Rust adds a working program for you. Open `src/main.rs`:\n",
        "\n",
        "```rust\n",
        "fn main() {\n",
        "    println!(\"Hello, world!\");\n",
        "}\n",
        "```\n",
        "\n",
        "* `main()` is required — it’s where execution starts.\n",
        "* `println!()` prints to the terminal.\n",
        "* To run your program:\n",
        "\n",
        "```shell\n",
        "cargo run\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## `println!()` is a Macro\n",
        "\n",
        "* Macros have a `!`, like `println!()`.\n",
        "* Think of it like `print()` in R, but explicit.\n",
        "* It supports format strings:\n",
        "\n",
        "```rust\n",
        "let name = \"Josiah\";\n",
        "println!(\"Hello, {}!\", name);  // → Hello, Josiah!\n",
        "```\n",
        "\n",
        "* `{}` works if the value can be **displayed**.\n",
        "* Use `{:?}` for **debug output** (like `str()` or `dput()` in R):\n",
        "\n",
        "```rust\n",
        "let v = vec![1, 2, 3];\n",
        "println!(\"{:?}\", v);  // → [1, 2, 3]\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## TL;DR\n",
        "\n",
        "You created a project, ran a binary, and printed output — the Rust way."
      ],
      "id": "1b52b2dd"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}