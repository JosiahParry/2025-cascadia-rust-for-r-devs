# Struct Methods

- `&self`
- `Self`


## Exercise

- Define a new method


```rust
impl Struct {
  fn new(x: f64, y: f64) -> Self {
    Self { x, y }
  }
}
```

- define a distance method that calculates the euclidean distance between a point and a reference to another

```rust
impl Point {
    fn euclidean_distance(&self, destination: &Self) -> f64 {
        ((self.x - destination.x).powi(2) + (self.y - destination.y).powi(2)).sqrt()
    }
}
```

## Bonus: Exercise 2



Haversine distance is a fast way of calculating distances on a sphere. It is not the most accurate method for all cases, but it's good enough for many common applications like calculating distances between cities!

It is defined by the following equation:

The Haversine formula computes the distance between two points on a sphere given their longitudes and latitudes.

$$a = \sin^2\left(\frac{\Delta\phi}{2}\right) + \cos\phi_1 \cdot \cos\phi_2 \cdot \sin^2\left(\frac{\Delta\lambda}{2}\right)$$

$$c = 2 \cdot \text{atan2}(\sqrt{a}, \sqrt{1-a})$$

$$d = R \cdot c$$

Where:

- $\phi$ represents latitude (in radians) (use `.to_radians()`)
- $\lambda$ represents longitude (in radians) (use `.to_radians()`)
- $R$ is the Earth's radius (you can use `6_371_008_7714f64` meters as a mean radius)
- $\Delta\phi$ is the difference in latitude between the two points ($\phi_2 - \phi_1$)
- $\Delta\lambda$ is the difference in longitude between the two points ($\lambda_2 - \lambda_1$)
* $\text{atan2}(y, x)$ is the **arctangent** of $y/x$, using the signs of both arguments to determine the correct quadrant.


**Hints for Implementation:**

* Remember to convert your latitude and longitude values from degrees to **radians** using the `.to_radians()` method on `f64`.
* The `c` part of the formula, $2 \cdot \text{atan2}(\sqrt{a}, \sqrt{1-a})$, can also be implemented using `2 * a.sqrt().asin()` in Rust, which is a common simplification when `a` is within the valid domain for `asin`.


### Solution

```rust
impl Point {
    fn haversine_distance(&self, destination: &Self) -> f64 {
        let radius = 6_371_008.7714; // Earth's mean radius in meters
        let theta1 = self.y.to_radians(); // Latitude of point 1
        let theta2 = destination.y.to_radians(); // Latitude of point 2
        let delta_theta = (destination.y - self.y).to_radians(); // Delta Latitude
        let delta_lambda = (destination.x - self.x).to_radians(); // Delta Longitude

        let a = (delta_theta / 2f64).sin().powi(2)
            + theta1.cos() * theta2.cos() * (delta_lambda / 2f64).sin().powi(2);

        2f64 * a.sqrt().asin() * radius
    }
}

```
