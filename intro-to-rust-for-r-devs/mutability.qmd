# Mutability

::: callout-tip
Understand the difference between immutable and mutable variables.
:::


- `mut` keyword
- modifies the object in place don't need to use `let`

```rust
fn main() {
    let numbers = vec![1, 2, 3];
    let mut doubled = 0;
    for n in numbers {
        doubled = n * 2;
        println!("{} doubled is {}", n, doubled);
    }

    // âœ… compiles because `doubled` was declared
    // _outside_ of the inner loop scope
    println!("Last doubled: {}", doubled);
}
```

## Exercise

Create a function called `mean()` that calculates the mean of a `Vec<f64>`


## Solution

```rust
fn mean(x: &[f64]) -> f64 {
    let n = x.len() as f64;
    let mut total = 0.0;

    for xi in x {
        total += xi;
    }

    total / n
}
```
