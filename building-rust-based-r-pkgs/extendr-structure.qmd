# Package structure


The basic structure of an extendr-based R package is like so:

```
.
├── DESCRIPTION
├── NAMESPACE
├── R
├── configure
├── configure.win
├── man
├── src
└── tools
```

- This should look fairly familiar to you
- The primary difference is the presence of `src`, `configure` and `tools`
- extendr includes Rust into the package source making the package a compiled package which **must** be placed in the `src/` directory
- the `tools/`, `configure`, and `configure.win` are more for R CMD check and CRAN
    - used to check for the presence of Rust at start up to ensure that the package can compile

## Using compiled code

- compiled code has to be placed in the `src/` directory

```
.
├── Makevars
├── Makevars.in
├── Makevars.win.in
└── rust
    ├── Cargo.lock
    ├── Cargo.toml
    ├── src
```

- inside of `src/` there is a directory called `rust`
    - this contains a rust library crate
    - previous workshop we create a binary crate—something that can be run right away
    - libraries are typically included into other libraries or binaries and compiled together
    - in our case, we are building a shared object / dll that is linked to by R
- Various `Makevars` files are used to compile the R package and link to the generated rust library that we develop.

## Rust libraries

inside of rust/ is a Rust library crate. The primary difference is that instead of having a `main.rs` we have also a `lib.rs`.

In the library we do not have any entrypoint that gets executed. It is much like an R package. We define functions aand structs etc that are used by R package.

##
